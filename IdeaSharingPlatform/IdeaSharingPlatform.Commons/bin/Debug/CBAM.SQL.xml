<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CBAM.SQL</name>
    </assembly>
    <members>
        <member name="T:CBAM.SQL.SQLConnection">
            <summary>
            This interfaces extends the generic CBAM <see cref="T:CBAM.Abstractions.Connection`6"/> interface to provide SQL-specific functionality in addition to generic functionality.
            Furthermore, all generic type arguments of <see cref="T:CBAM.Abstractions.Connection`6"/> are bound to those that also provide SQL-specialization, and enables to use this interface for any SQL processing, regardless of vendor.
            </summary>
        </member>
        <member name="P:CBAM.SQL.SQLConnection.DatabaseMetadata">
            <summary>
            Gets the <see cref="T:CBAM.SQL.DatabaseMetadata"/> object describing the database this <see cref="T:CBAM.SQL.SQLConnection"/> is connected to.
            </summary>
            <value>The <see cref="T:CBAM.SQL.DatabaseMetadata"/> object describing the database this <see cref="T:CBAM.SQL.SQLConnection"/> is connected to.</value>
            <seealso cref="T:CBAM.SQL.DatabaseMetadata"/>
        </member>
        <member name="M:CBAM.SQL.SQLConnection.GetReadOnlyAsync">
            <summary>
            Potentially asynchronously gets the value indicating whether this <see cref="T:CBAM.SQL.SQLConnection"/> is read-only, .
            </summary>
            <returns>A task which on completion will have value indicating whether this <see cref="T:CBAM.SQL.SQLConnection"/> is read-only.</returns>
        </member>
        <member name="M:CBAM.SQL.SQLConnection.SetReadOnlyAsync(System.Boolean)">
            <summary>
            Asynchronously sets the value indicating whether this <see cref="T:CBAM.SQL.SQLConnection"/> is read-only.
            </summary>
            <param name="isReadOnly">Whether this connection should be read-only.</param>
            <returns>A task which on completion has set the value indicating whether this <see cref="T:CBAM.SQL.SQLConnection"/> is read-only. The returned value of the task should always be <c>1</c>.</returns>
        </member>
        <member name="M:CBAM.SQL.SQLConnection.GetDefaultTransactionIsolationLevelAsync">
            <summary>
            Potentially asynchronously gets the value indicating current transaction isolation level.
            </summary>
            <returns>A task which on completion will have value indicating current transaction isolation level.</returns>
            <seealso cref="T:CBAM.SQL.TransactionIsolationLevel"/>
        </member>
        <member name="M:CBAM.SQL.SQLConnection.SetDefaultTransactionIsolationLevelAsync(CBAM.SQL.TransactionIsolationLevel)">
            <summary>
            Asynchronously sets the value indicating current transaction isolation level.
            </summary>
            <param name="level">The new transaction isolation level.</param>
            <returns>A task which on completion has set the value indicating current transaction isolation level. The returned value of the task should always be <c>1</c>.</returns>
            <seealso cref="T:CBAM.SQL.TransactionIsolationLevel"/>
        </member>
        <member name="M:CBAM.SQL.SQLConnection.ProcessStatementResultPassively(UtilPack.MemorizingPotentiallyAsyncReader{System.Nullable{System.Char},System.Char},CBAM.SQL.SQLStatementBuilderInformation,CBAM.SQL.SQLStatementExecutionResult)">
            <summary>
            Given current <see cref="T:CBAM.SQL.SQLStatementExecutionResult"/> and context of reading SQL from some source (<see cref="T:UtilPack.MemorizingPotentiallyAsyncReader`2"/>), processes the result passively (no user input).
            This is used by <see cref="M:E_CBAM.ExecuteStatementsFromStreamAsync(CBAM.SQL.SQLConnection,UtilPack.MemorizingPotentiallyAsyncReader{System.Nullable{System.Char},System.Char},System.Func{CBAM.SQL.SQLException,CBAM.SQL.WhenExceptionInMultipleStatements})"/> method which is equivalent to running SQL dump from file to database.
            </summary>
            <param name="reader">The source where SQL statement originated.</param>
            <param name="statementInformation">The <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/> about current statement.</param>
            <param name="executionResult">The <see cref="T:CBAM.SQL.SQLStatementExecutionResult"/> encountered when enumerating <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> returned by <see cref="M:CBAM.Abstractions.Connection`6.PrepareStatementForExecution(`1)"/>.</param>
            <returns>A task which should return <c>true</c> on completion if anything was done to <paramref name="reader"/>.</returns>
        </member>
        <member name="T:CBAM.SQL.SQLConnectionVendorFunctionality">
            <summary>
            This interface extends generic CBAM interface <see cref="T:CBAM.Abstractions.ConnectionVendorFunctionality`2"/> to provide SQL-specific functionality common for all SQL vendors.
            This functionality has mostly to do with SQL syntax.
            </summary>
        </member>
        <member name="M:CBAM.SQL.SQLConnectionVendorFunctionality.EscapeLiteral(System.String)">
            <summary>
            Given a string, escapes any characters in it so that it can be interpreted as literal string in this SQL vendor.
            </summary>
            <param name="str">The string to escape. May be <c>null</c>.</param>
            <returns>Escaped string.</returns>
        </member>
        <member name="M:CBAM.SQL.SQLConnectionVendorFunctionality.TryAdvanceReaderOverSingleStatement(UtilPack.PeekablePotentiallyAsyncReader{System.Nullable{System.Char}})">
            <summary>
            Given a <see cref="T:UtilPack.PeekablePotentiallyAsyncReader`1"/> (which can wrap a normal <see cref="T:System.String"/>), tries to advance it over a single, complete SQL statement.
            </summary>
            <param name="reader">The reader to advance.</param>
            <returns>A task which will complete after advance is over. Return value is currently not used, since <see cref="T:System.Threading.Tasks.ValueTask`1"/> does not exist as non-generic version.</returns>
        </member>
        <member name="M:CBAM.SQL.SQLConnectionVendorFunctionality.CanTrimBegin(System.Char)">
            <summary>
            Returns <c>true</c> if given character is ignored when it appears at start of SQL string.
            </summary>
            <param name="c">The character to check.</param>
            <returns><c>true</c> if <paramref name="c"/> is ignored when it appears at start of SQL string.</returns>
        </member>
        <member name="M:CBAM.SQL.SQLConnectionVendorFunctionality.CanTrimEnd(System.Char)">
            <summary>
            Returns <c>true</c> if given character is ignored when it appears at end of SQL string.
            </summary>
            <param name="c">The character to check.</param>
            <returns><c>true</c> if <paramref name="c"/> is ignored when it appears at end of SQL string.</returns>
        </member>
        <member name="T:CBAM.SQL.TransactionIsolationLevel">
            <summary>
            This enumeration describes the transaction isolation levels in relational databases.
            </summary>
            <seealso href="https://en.wikipedia.org/wiki/Isolation_(database_systems)"/>
        </member>
        <member name="F:CBAM.SQL.TransactionIsolationLevel.ReadUncommitted">
            <summary>
            Indicates the <c>READ UNCOMMITTED</c> isolation level.
            </summary>
        </member>
        <member name="F:CBAM.SQL.TransactionIsolationLevel.ReadCommitted">
            <summary>
            Indicates the <c>READ COMMITTED</c> isolation level.
            </summary>
        </member>
        <member name="F:CBAM.SQL.TransactionIsolationLevel.RepeatableRead">
            <summary>
            Indicates the <c>REPEATABLE READ</c> isolation level.
            </summary>
        </member>
        <member name="F:CBAM.SQL.TransactionIsolationLevel.Serializable">
            <summary>
            Indicates the <c>SERIALIZABLE</c> isolation level.
            </summary>
        </member>
        <member name="T:CBAM.SQL.SQLStatementExecutionResult">
            <summary>
            This is common interface for items enumerated by <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> returned by <see cref="M:CBAM.Abstractions.Connection`6.PrepareStatementForExecution(`1)"/> method of <see cref="T:CBAM.SQL.SQLConnection"/>.
            </summary>
            <seealso cref="T:CBAM.SQL.SQLDataRow"/>
            <seealso cref="T:CBAM.SQL.SingleCommandExecutionResult"/>
            <seealso cref="T:CBAM.SQL.BatchCommandExecutionResult"/>
        </member>
        <member name="P:CBAM.SQL.SQLStatementExecutionResult.Warnings">
            <summary>
            Gets the warnings issued by backend during last call of <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.WaitForNextAsync"/>.
            </summary>
            <value>The warnings issued by backend during last call of <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.WaitForNextAsync"/>.</value>
        </member>
        <member name="T:CBAM.SQL.SingleCommandExecutionResult">
            <summary>
            This interface extends <see cref="T:CBAM.SQL.SQLStatementExecutionResult"/> to provide additional information when backend has finished executing one SQL statement (SQL string may contain multiple statements).
            </summary>
        </member>
        <member name="P:CBAM.SQL.SingleCommandExecutionResult.AffectedRows">
            <summary>
            Gets the amount of rows affected by the single SQL statement.
            </summary>
            <value>The amount of rows affected by the single SQL statement.</value>
        </member>
        <member name="P:CBAM.SQL.SingleCommandExecutionResult.CommandTag">
            <summary>
            Gets the vendor-specific command tag string (e.g. <c>"INSERT"</c>, <c>"UPDATE"</c> etc) of the executed SQL statement.
            </summary>
            <value>The vendor-specific command tag string (e.g. <c>"INSERT"</c>, <c>"UPDATE"</c> etc) of the executed SQL statement.</value>
        </member>
        <member name="T:CBAM.SQL.BatchCommandExecutionResult">
            <summary>
            This interface extends <see cref="T:CBAM.SQL.SQLStatementExecutionResult"/> to provide additional information when backend has finished executing a batch of SQL statement with various parameters.
            </summary>
            <seealso cref="M:CBAM.SQL.SQLStatementBuilder.AddBatch"/>
        </member>
        <member name="P:CBAM.SQL.BatchCommandExecutionResult.AffectedRows">
            <summary>
            Gets the amount of rows affected by each executed SQL statement.
            </summary>
            <value>The amount of rows affected by each executed SQL statement.</value>
        </member>
        <member name="P:CBAM.SQL.BatchCommandExecutionResult.CommandTag">
            <summary>
            Gets the vendor-specific command tag string (e.g. <c>"INSERT"</c>, <c>"UPDATE"</c> etc) of the executed SQL statement.
            </summary>
            <value>The vendor-specific command tag string (e.g. <c>"INSERT"</c>, <c>"UPDATE"</c> etc) of the executed SQL statement.</value>
        </member>
        <member name="T:CBAM.SQL.SQLDataRow">
            <summary>
            This interface extends <see cref="T:CBAM.SQL.SQLStatementExecutionResult"/> to provide additional information about single row sent by backend as a result of <c>"SELECT"</c> statement.
            Furthermore, this interface extends <see cref="T:UtilPack.TabularData.AsyncDataRow"/> to provide access to the columns of the data row.
            </summary>
        </member>
        <member name="T:CBAM.SQL.WhenExceptionInMultipleStatements">
            <summary>
            This enumeration is used by <see cref="M:E_CBAM.ExecuteStatementsFromStreamAsync(CBAM.SQL.SQLConnection,UtilPack.MemorizingPotentiallyAsyncReader{System.Nullable{System.Char},System.Char},System.Func{CBAM.SQL.SQLException,CBAM.SQL.WhenExceptionInMultipleStatements})"/> and <see cref="M:E_CBAM.ExecuteStatementsFromStreamAsync(CBAM.SQL.SQLConnection,System.IO.Stream,System.Text.Encoding,System.Int32,System.Int32,System.Func{CBAM.SQL.SQLException,CBAM.SQL.WhenExceptionInMultipleStatements},System.Threading.CancellationToken)"/> extension methods to control how the method behaves when an exception is occurred in statement result processing.
            </summary>
        </member>
        <member name="F:CBAM.SQL.WhenExceptionInMultipleStatements.Rethrow">
            <summary>
            This value indicates that an exception should be simply re-thrown.
            </summary>
        </member>
        <member name="F:CBAM.SQL.WhenExceptionInMultipleStatements.Continue">
            <summary>
            This value indicates that exception should be ignored, and current transaction should be rollbacked (no SQL command is executed on error, as the transaction is automatically rollbacked when an error occurs).
            The SQL statement processing will continue.
            </summary>
        </member>
        <member name="F:CBAM.SQL.WhenExceptionInMultipleStatements.RollbackAndStartNew">
            <summary>
            This value indicates that exception should be ignored, and new transaction should be started (current transaction is automatically rollbacked when an error occurs, and SQL statement to start new transaction (<c>"BEGIN TRANSACTION"</c>) is issued).
            The SQL statement processing will continue.
            </summary>
        </member>
        <member name="T:CBAM.SQL.DatabaseMetadata">
            <summary>
            This interface contains all API related to metadata of the database that <see cref="T:CBAM.SQL.SQLConnection"/> is currently connected to.
            </summary>
            <remarks>
            While the API exposed directly by this interface can be used, in most scenarios, the actual usage happens through extension methods:
            <list type="bullet">
            <item><description><see cref="M:CBAM.SQL.CBAMExtensions.GetSchemaMetadataAsync(CBAM.SQL.SQLConnection,System.String)"/>,</description></item>
            <item><description><see cref="M:CBAM.SQL.CBAMExtensions.GetTableMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,CBAM.SQL.TableType[])"/>,</description></item>
            <item><description><see cref="M:CBAM.SQL.CBAMExtensions.GetColumnMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,System.String)"/>,</description></item>
            <item><description><see cref="M:CBAM.SQL.CBAMExtensions.GetPrimaryKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)"/>,</description></item>
            <item><description><see cref="M:CBAM.SQL.CBAMExtensions.GetExportedForeignKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)"/>, and</description></item>
            <item><description><see cref="M:CBAM.SQL.CBAMExtensions.GetImportedForeignKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)"/>.</description></item>
            </list>
            </remarks>
            <seealso cref="P:CBAM.SQL.SQLConnection.DatabaseMetadata"/>
        </member>
        <member name="P:CBAM.SQL.DatabaseMetadata.Name">
            <summary>
            Gets the name of the database that the <see cref="T:CBAM.SQL.SQLConnection"/> is connected to.
            </summary>
            <value>The name of the database that the <see cref="T:CBAM.SQL.SQLConnection"/> is connected to.</value>
        </member>
        <member name="M:CBAM.SQL.DatabaseMetadata.CreateSchemaSearch(System.String)">
            <summary>
            Creates a new <see cref="T:CBAM.SQL.SQLStatementBuilder"/> which contains information for executing schema search with given schema name pattern.
            </summary>
            <param name="schemaNamePattern">The schema name pattern. If not <c>null</c>, will narrow down search results based on schema name.</param>
            <returns>An <see cref="T:CBAM.SQL.SQLStatementBuilder"/> which can be used to search the schema information from the database.</returns>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetSchemaMetadataAsync(CBAM.SQL.SQLConnection,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractSchemaMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
        </member>
        <member name="M:CBAM.SQL.DatabaseMetadata.CreateTableSearch(System.String,System.String,CBAM.SQL.TableType[])">
            <summary>
            Creates a new <see cref="T:CBAM.SQL.SQLStatementBuilder"/> which contains information for executing table search with given search parameters.
            </summary>
            <param name="schemaNamePattern">The schema name pattern. If not <c>null</c>, will narrow down search results based on schema name.</param>
            <param name="tableNamePattern">The table name pattern. If not <c>null</c>, will narrow down search results based on table name.</param>
            <param name="tableTypes">The table types. If not <c>null</c> and not empty, can be used to further narrow down search results based on table type.</param>
            <returns>An <see cref="T:CBAM.SQL.SQLStatementBuilder"/> which can be used to search the table information from the database.</returns>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetTableMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,CBAM.SQL.TableType[])"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractTableMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
            <seealso cref="T:CBAM.SQL.TableType"/>
        </member>
        <member name="M:CBAM.SQL.DatabaseMetadata.CreateColumnSearch(System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:CBAM.SQL.SQLStatementBuilder"/> which contains information for executing table column search with given search parameters.
            </summary>
            <param name="schemaNamePattern">The schema name pattern. If not <c>null</c>, will narrow down search results based on schema name.</param>
            <param name="tableNamePattern">The table name pattern. If not <c>null</c>, will narrow down search results based on table name.</param>
            <param name="columnNamePattern">The column name pattern. If not <c>null</c>, will narrow down search results based on table column name.</param>
            <returns>An <see cref="T:CBAM.SQL.SQLStatementBuilder"/> which can be used to search the table column information from the database.</returns>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetColumnMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractColumnMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
        </member>
        <member name="M:CBAM.SQL.DatabaseMetadata.CreatePrimaryKeySearch(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:CBAM.SQL.SQLStatementBuilder"/> which contains information for executing table primary key search with given search parameters.
            </summary>
            <param name="schemaNamePattern">The schema name pattern. If not <c>null</c>, will narrow down search results based on schema name.</param>
            <param name="tableNamePattern">The table name pattern. If not <c>null</c>, will narrow down search results based on table name.</param>
            <returns>An <see cref="T:CBAM.SQL.SQLStatementBuilder"/> which can be used to search the table primary key information from the database.</returns>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetPrimaryKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractPrimaryKeyMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
        </member>
        <member name="M:CBAM.SQL.DatabaseMetadata.CreateForeignKeySearch(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:CBAM.SQL.SQLStatementBuilder"/> which contains information for executing table foreign key search with given search parameters.
            </summary>
            <param name="primarySchemaName">The schema name of the table containing primary key. If not <c>null</c>, will narrow down search results based on primary key table schema name.</param>
            <param name="primaryTableName">The name of the table containing primary key. If not <c>null</c>, will narrow down search results based on primary key table name.</param>
            <param name="foreignSchemaName">The schema name of the table containing foreign key. If not <c>null</c>, will narrow down search results based on foreign key table schema name.</param>
            <param name="foreignTableName">The name of the table containing foreign key. If not <c>null</c>, will narrow down search results based on foreign key table name.</param>
            <returns>An <see cref="T:CBAM.SQL.SQLStatementBuilder"/> which can be used to search the table foreign key information from the database.</returns>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetImportedForeignKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetExportedForeignKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetCrossReferenceMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractForeignKeyMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
        </member>
        <member name="M:CBAM.SQL.DatabaseMetadata.ExtractSchemaMetadataAsync(UtilPack.TabularData.AsyncDataRow)">
            <summary>
            This method will create a new <see cref="T:CBAM.SQL.SchemaMetadata"/> based on <see cref="T:UtilPack.TabularData.AsyncDataRow"/> resulted from executing query produced by <see cref="M:CBAM.SQL.DatabaseMetadata.CreateSchemaSearch(System.String)"/>.
            </summary>
            <param name="row">The data row encountered during processing query produced by <see cref="M:CBAM.SQL.DatabaseMetadata.CreateSchemaSearch(System.String)"/>.</param>
            <returns>A task which will on completion result in <see cref="T:CBAM.SQL.SchemaMetadata"/> object.</returns>
            <remarks>
            Using this method on a <see cref="T:UtilPack.TabularData.AsyncDataRow"/> which originates from other <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> then the one returned by <see cref="M:CBAM.SQL.DatabaseMetadata.CreateSchemaSearch(System.String)"/> will most likely result in errors.
            </remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="row"/> is <c>null</c>.</exception>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetSchemaMetadataAsync(CBAM.SQL.SQLConnection,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.CreateSchemaSearch(System.String)"/>
        </member>
        <member name="M:CBAM.SQL.DatabaseMetadata.ExtractTableMetadataAsync(UtilPack.TabularData.AsyncDataRow)">
            <summary>
            This method will create a new <see cref="T:CBAM.SQL.TableMetadata"/> based on <see cref="T:UtilPack.TabularData.AsyncDataRow"/> resulted from executing query produced by <see cref="M:CBAM.SQL.DatabaseMetadata.CreateTableSearch(System.String,System.String,CBAM.SQL.TableType[])"/>.
            </summary>
            <param name="row">The data row encountered during processing query produced by <see cref="M:CBAM.SQL.DatabaseMetadata.CreateTableSearch(System.String,System.String,CBAM.SQL.TableType[])"/>.</param>
            <returns>A task which will on completion result in <see cref="T:CBAM.SQL.TableMetadata"/> object.</returns>
            <remarks>
            Using this method on a <see cref="T:UtilPack.TabularData.AsyncDataRow"/> which originates from other <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> then the one returned by <see cref="M:CBAM.SQL.DatabaseMetadata.CreateTableSearch(System.String,System.String,CBAM.SQL.TableType[])"/> will most likely result in errors.
            </remarks>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetTableMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,CBAM.SQL.TableType[])"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.CreateTableSearch(System.String,System.String,CBAM.SQL.TableType[])"/>
        </member>
        <member name="M:CBAM.SQL.DatabaseMetadata.ExtractColumnMetadataAsync(UtilPack.TabularData.AsyncDataRow)">
            <summary>
            This method will create a new <see cref="T:CBAM.SQL.ColumnMetadata"/> based on <see cref="T:UtilPack.TabularData.AsyncDataRow"/> resulted from executing query produced by <see cref="M:CBAM.SQL.DatabaseMetadata.CreateColumnSearch(System.String,System.String,System.String)"/>.
            </summary>
            <param name="row">The data row encountered during processing query produced by <see cref="M:CBAM.SQL.DatabaseMetadata.CreateColumnSearch(System.String,System.String,System.String)"/>.</param>
            <returns>A task which will on completion result in <see cref="T:CBAM.SQL.ColumnMetadata"/> object.</returns>
            <remarks>
            Using this method on a <see cref="T:UtilPack.TabularData.AsyncDataRow"/> which originates from other <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> then the one returned by <see cref="M:CBAM.SQL.DatabaseMetadata.CreateColumnSearch(System.String,System.String,System.String)"/> will most likely result in errors.
            </remarks>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetColumnMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.CreateColumnSearch(System.String,System.String,System.String)"/>
        </member>
        <member name="M:CBAM.SQL.DatabaseMetadata.ExtractPrimaryKeyMetadataAsync(UtilPack.TabularData.AsyncDataRow)">
            <summary>
            This method will create a new <see cref="T:CBAM.SQL.PrimaryKeyMetadata"/> based on <see cref="T:UtilPack.TabularData.AsyncDataRow"/> resulted from executing query produced by <see cref="M:CBAM.SQL.DatabaseMetadata.CreatePrimaryKeySearch(System.String,System.String)"/>.
            </summary>
            <param name="row">The data row encountered during processing query produced by <see cref="M:CBAM.SQL.DatabaseMetadata.CreatePrimaryKeySearch(System.String,System.String)"/>.</param>
            <returns>A task which will on completion result in <see cref="T:CBAM.SQL.PrimaryKeyMetadata"/> object.</returns>
            <remarks>
            Using this method on a <see cref="T:UtilPack.TabularData.AsyncDataRow"/> which originates from other <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> then the one returned by <see cref="M:CBAM.SQL.DatabaseMetadata.CreatePrimaryKeySearch(System.String,System.String)"/> will most likely result in errors.
            </remarks>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetPrimaryKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.CreatePrimaryKeySearch(System.String,System.String)"/>
        </member>
        <member name="M:CBAM.SQL.DatabaseMetadata.ExtractForeignKeyMetadataAsync(UtilPack.TabularData.AsyncDataRow)">
            <summary>
            This method will create a new <see cref="T:CBAM.SQL.ForeignKeyMetadata"/> based on <see cref="T:UtilPack.TabularData.AsyncDataRow"/> resulted from executing query produced by <see cref="M:CBAM.SQL.DatabaseMetadata.CreateForeignKeySearch(System.String,System.String,System.String,System.String)"/>.
            </summary>
            <param name="row">The data row encountered during processing query produced by <see cref="M:CBAM.SQL.DatabaseMetadata.CreateForeignKeySearch(System.String,System.String,System.String,System.String)"/>.</param>
            <returns>A task which will on completion result in <see cref="T:CBAM.SQL.ForeignKeyMetadata"/> object.</returns>
            <remarks>
            Using this method on a <see cref="T:UtilPack.TabularData.AsyncDataRow"/> which originates from other <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> then the one returned by <see cref="M:CBAM.SQL.DatabaseMetadata.CreateForeignKeySearch(System.String,System.String,System.String,System.String)"/> will most likely result in errors.
            </remarks>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetImportedForeignKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetExportedForeignKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetCrossReferenceMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.CreateForeignKeySearch(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="T:CBAM.SQL.DatabaseElementWithSchemaName">
            <summary>
            This is common interface for database metadata objects which have a schema name.
            </summary>
            <seealso cref="T:CBAM.SQL.SchemaMetadata"/>
            <seealso cref="T:CBAM.SQL.TableMetadata"/>
            <seealso cref="T:CBAM.SQL.ColumnMetadata"/>
            <seealso cref="T:CBAM.SQL.PrimaryKeyMetadata"/>
            <seealso cref="T:CBAM.SQL.ForeignKeyMetadata"/>
        </member>
        <member name="P:CBAM.SQL.DatabaseElementWithSchemaName.SchemaName">
            <summary>
            Gets the name of the schema this database metadata object belongs to.
            </summary>
            <value>The name of the schema this database metadata object belongs to.</value>
        </member>
        <member name="T:CBAM.SQL.SchemaMetadata">
            <summary>
            This interface represents information about a single schema in the database.
            </summary>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetSchemaMetadataAsync(CBAM.SQL.SQLConnection,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractSchemaMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
        </member>
        <member name="T:CBAM.SQL.DatabaseElementWithTableName">
            <summary>
            This is common interface for database metadata objects which have a table name.
            </summary>
            <seealso cref="T:CBAM.SQL.TableMetadata"/>
            <seealso cref="T:CBAM.SQL.ColumnMetadata"/>
            <seealso cref="T:CBAM.SQL.PrimaryKeyMetadata"/>
            <seealso cref="T:CBAM.SQL.ForeignKeyMetadata"/>
        </member>
        <member name="P:CBAM.SQL.DatabaseElementWithTableName.TableName">
            <summary>
            Gets the name of the table this database metadata object belongs to.
            </summary>
            <value>The name of the table this database metadata object belongs to.</value>
        </member>
        <member name="T:CBAM.SQL.DatabaseElementWithComment">
            <summary>
            This is common interface for database metadata objects which have a comment.
            </summary>
            <seealso cref="T:CBAM.SQL.SchemaMetadata"/>
            <seealso cref="T:CBAM.SQL.TableMetadata"/>
            <seealso cref="T:CBAM.SQL.ColumnMetadata"/>
        </member>
        <member name="P:CBAM.SQL.DatabaseElementWithComment.Comment">
            <summary>
            Gets the textual comment associated with this database metadata object.
            </summary>
            <value>The textual comment associated with this database metadata object.</value>
        </member>
        <member name="T:CBAM.SQL.DatabaseElementWithTypeName">
            <summary>
            This is common interface for database metadata objects which have some sort of type name.
            </summary>
            <seealso cref="T:CBAM.SQL.TableMetadata"/>
            <seealso cref="T:CBAM.SQL.ColumnMetadata"/>
        </member>
        <member name="P:CBAM.SQL.DatabaseElementWithTypeName.TypeName">
            <summary>
            Gets the textual type name of this database metadata object.
            </summary>
            <value>The textual type name of this database metadata object.</value>
        </member>
        <member name="T:CBAM.SQL.TableMetadata">
            <summary>
            This interface contains information about a single table in the database.
            </summary>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetTableMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,CBAM.SQL.TableType[])"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractTableMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
        </member>
        <member name="P:CBAM.SQL.TableMetadata.TableType">
            <summary>
            Gets the type of the table as <see cref="T:CBAM.SQL.TableType"/> enumeration.
            </summary>
            <value>The type of the table as <see cref="T:CBAM.SQL.TableType"/> enumeration.</value>
            <seealso cref="T:CBAM.SQL.TableType"/>
            <seealso cref="P:CBAM.SQL.DatabaseElementWithTypeName.TypeName"/>
        </member>
        <member name="T:CBAM.SQL.DatabaseElementWithColumnName">
            <summary>
            This is common interface for database metadata objects which have column name.
            </summary>
        </member>
        <member name="P:CBAM.SQL.DatabaseElementWithColumnName.ColumnName">
            <summary>
            Gets the name of the column this database metadata object belongs to.
            </summary>
            <value>The name of the column this database metadata object belongs to.</value>
        </member>
        <member name="T:CBAM.SQL.DatabaseElementWithOrdinalPosition">
            <summary>
            This is common interface for database metadata objects which are contained within some other object (e.g. column in a table) and have ordinal position.
            </summary>
        </member>
        <member name="P:CBAM.SQL.DatabaseElementWithOrdinalPosition.OrdinalPosition">
            <summary>
            Gets the zero-based ordinal position of this database metadata object within parent object.
            </summary>
            <value>The zero-based ordinal position of this database metadata object within parent object.</value>
        </member>
        <member name="T:CBAM.SQL.ColumnMetadata">
            <summary>
            This interface contains information about single column of a single table in the database.
            </summary>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetColumnMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractColumnMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
        </member>
        <member name="P:CBAM.SQL.ColumnMetadata.DecimalDigits">
            <summary>
            Gets the amount of decimal digits, if applicable.
            </summary>
            <value>The amount of decimal digits, if applicable.</value>
        </member>
        <member name="P:CBAM.SQL.ColumnMetadata.Nullable">
            <summary>
            Gets the value indicating whether this column accepts <c>NULL</c>s as valid values.
            </summary>
            <value>The value indicating whether this column accepts <c>NULL</c>s as valid values.</value>
        </member>
        <member name="P:CBAM.SQL.ColumnMetadata.ColumnDefaultValue">
            <summary>
            Gets the column default value, if any.
            </summary>
            <value>The column default value, if any.</value>
        </member>
        <member name="P:CBAM.SQL.ColumnMetadata.ColumnCLRType">
            <summary>
            Gets the column CLR type, if it can be deducted at runtime.
            </summary>
            <value>The column CLR type, if it can be deducted at runtime.</value>
        </member>
        <member name="P:CBAM.SQL.ColumnMetadata.IsPrimaryKeyColumn">
            <summary>
            Gets the value indicating whether this column is primary key column.
            </summary>
            <value>The value indicating whether this column is primary key column.</value>
        </member>
        <member name="T:CBAM.SQL.KeyMetadataInfo">
            <summary>
            This is common interface for direct and indirect primary and foreign key information in the database.
            </summary>
            <seealso cref="T:CBAM.SQL.PrimaryKeyMetadata"/>
            <seealso cref="T:CBAM.SQL.ForeignKeyMetadata"/>
            <seealso cref="P:CBAM.SQL.ForeignKeyMetadata.PrimaryKey"/>
        </member>
        <member name="P:CBAM.SQL.KeyMetadataInfo.KeyName">
            <summary>
            Gets the name of this primary or foreign key information.
            </summary>
        </member>
        <member name="T:CBAM.SQL.KeyMetadata">
            <summary>
            This is common interface for direct primary and foreign key information in the database.
            </summary>
            <seealso cref="T:CBAM.SQL.PrimaryKeyMetadata"/>
            <seealso cref="T:CBAM.SQL.ForeignKeyMetadata"/>
        </member>
        <member name="P:CBAM.SQL.KeyMetadata.Deferrability">
            <summary>
            Gets the <see cref="T:CBAM.SQL.ConstraintCharacteristics"/> of this primary or foreign key information, if it exists.
            </summary>
            <value>The <see cref="T:CBAM.SQL.ConstraintCharacteristics"/> of this primary or foreign key information, if it exists.</value>
        </member>
        <member name="T:CBAM.SQL.PrimaryKeyMetadata">
            <summary>
            This interface contains information about single primary key column of a single table in the database.
            </summary>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetPrimaryKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractPrimaryKeyMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
        </member>
        <member name="T:CBAM.SQL.ForeignKeyMetadata">
            <summary>
            This interface contains information about single foreign key column of a single table in the database.
            </summary>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetImportedForeignKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetExportedForeignKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetCrossReferenceMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractForeignKeyMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
        </member>
        <member name="P:CBAM.SQL.ForeignKeyMetadata.PrimaryKey">
            <summary>
            Gets the information about the primary key column that this this foreign key column references.
            </summary>
            <value>The information about the primary key column that this this foreign key column references.</value>
        </member>
        <member name="P:CBAM.SQL.ForeignKeyMetadata.OnUpdate">
            <summary>
            Gets the <see cref="T:CBAM.SQL.ReferentialAction"/> of this foreign key constraint for update action, if any.
            </summary>
            <value>The <see cref="T:CBAM.SQL.ReferentialAction"/> of this foreign key constraint for update action, if any.</value>
        </member>
        <member name="P:CBAM.SQL.ForeignKeyMetadata.OnDelete">
            <summary>
            Gets the <see cref="T:CBAM.SQL.ReferentialAction"/> of this foreign key constraint for delete action, if any.
            </summary>
            <value>The <see cref="T:CBAM.SQL.ReferentialAction"/> of this foreign key constraint for delete action, if any.</value>
        </member>
        <member name="T:CBAM.SQL.ReferentialAction">
            <summary>
            This enumeration contains possible values for SQL actions when the target of the foreign key changes (<c>ON UPDATE</c>) or gets deleted (<c>ON DELETE</c>).
            </summary>
        </member>
        <member name="F:CBAM.SQL.ReferentialAction.Cascade">
            <summary>
            The foreign key will be updated to new value in case of change, and the row will be deleted in case of deletion.
            </summary>
        </member>
        <member name="F:CBAM.SQL.ReferentialAction.SetNull">
            <summary>
            The foreign key will be set to <c>NULL</c> value if the target changes or gets deleted.
            </summary>
        </member>
        <member name="F:CBAM.SQL.ReferentialAction.SetDefault">
            <summary>
            The foreign key will be set to default values if the target changes or gets deleted.
            </summary>
        </member>
        <member name="F:CBAM.SQL.ReferentialAction.Restrict">
            <summary>
            The change or deletion of the target will cause an error in that statement.
            </summary>
        </member>
        <member name="F:CBAM.SQL.ReferentialAction.NoAction">
            <summary>
            A lot like <see cref="F:CBAM.SQL.ReferentialAction.Restrict"/>, this will cause an error if the target gets changed or deleted, but the check is done only only at the very end of the statement, after triggers and other mechanisms have been processed.
            This means that even with deletion or change, the end-state might be acceptable, valid foreign key references.
            </summary>
        </member>
        <member name="T:CBAM.SQL.ConstraintCharacteristics">
            <summary>
            This enumeraton contains possible values for SQL constraint (e.g. <c>PRIMARY KEY</c>, <c>FOREIGN KEY</c>, etc) characteristics.
            </summary>
        </member>
        <member name="F:CBAM.SQL.ConstraintCharacteristics.InitiallyImmediate_Deferrable">
            <summary>
            The constraint is immediate by default, but may be deferred on demand when needed.
            </summary>
        </member>
        <member name="F:CBAM.SQL.ConstraintCharacteristics.InitiallyDeferred_Deferrable">
            <summary>
            The constraint is always deferred.
            </summary>
        </member>
        <member name="F:CBAM.SQL.ConstraintCharacteristics.NotDeferrable">
            <summary>
            The constraint is always immediate.
            </summary>
        </member>
        <member name="T:CBAM.SQL.TableType">
            <summary>
            This enumeration specifies for possible table types in table search of <see cref="M:CBAM.SQL.CBAMExtensions.GetTableMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,CBAM.SQL.TableType[])"/> and <see cref="M:CBAM.SQL.DatabaseMetadata.CreateTableSearch(System.String,System.String,CBAM.SQL.TableType[])"/> methods.
            </summary>
        </member>
        <member name="F:CBAM.SQL.TableType.Table">
            <summary>
            This value represents normal SQL table.
            </summary>
        </member>
        <member name="F:CBAM.SQL.TableType.View">
            <summary>
            This value represents a SQL view.
            </summary>
        </member>
        <member name="F:CBAM.SQL.TableType.SystemTable">
            <summary>
            This value represents a system table, aka catalog.
            </summary>
        </member>
        <member name="F:CBAM.SQL.TableType.GlobalTemporary">
            <summary>
            This value represents global temporary table.
            </summary>
        </member>
        <member name="F:CBAM.SQL.TableType.LocalTemporary">
            <summary>
            This value represents local temporary table.
            </summary>
        </member>
        <member name="F:CBAM.SQL.TableType.Synonym">
            <summary>
            This value represents a synonym table.
            </summary>
        </member>
        <member name="F:CBAM.SQL.TableType.MaxValue">
            <summary>
            This value represents the maximum value of this enumeration, and can be used in other enumerations which 'extend' this one.
            </summary>
        </member>
        <member name="T:CBAM.SQL.CBAMExtensions">
            <summary>
            This class contains extension methods for types defined in other assemblies, or rarely used extension methods for types defined in this assembly.
            </summary>
        </member>
        <member name="M:CBAM.SQL.CBAMExtensions.PrepareSchemaSearch(CBAM.SQL.SQLConnection,System.String)">
            <summary>
            Creates a new <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> which can be used to execute schema search with given schema name pattern.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="schemaNamePattern">The schema name pattern. If not <c>null</c>, will narrow down search results based on schema name.</param>
            <returns>An <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> which can be executed to search the schema information from the database.</returns>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetSchemaMetadataAsync(CBAM.SQL.SQLConnection,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractSchemaMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
        </member>
        <member name="M:CBAM.SQL.CBAMExtensions.PrepareTableSearch(CBAM.SQL.SQLConnection,System.String,System.String,CBAM.SQL.TableType[])">
            <summary>
            Creates a new <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> which can be used to execute table search with given search parameters.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="schemaNamePattern">The schema name pattern. If not <c>null</c>, will narrow down search results based on schema name.</param>
            <param name="tableNamePattern">The table name pattern. If not <c>null</c>, will narrow down search results based on table name.</param>
            <param name="tableTypes">The table types. If not <c>null</c> and not empty, can be used to further narrow down search results based on table type.</param>
            <returns>An <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> which can be executed to search the table information from the database.</returns>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetTableMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,CBAM.SQL.TableType[])"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractTableMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
            <seealso cref="T:CBAM.SQL.TableType"/>
        </member>
        <member name="M:CBAM.SQL.CBAMExtensions.PrepareColumnSearch(CBAM.SQL.SQLConnection,System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> which can be used to execute table column search with given search parameters.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="schemaNamePattern">The schema name pattern. If not <c>null</c>, will narrow down search results based on schema name.</param>
            <param name="tableNamePattern">The table name pattern. If not <c>null</c>, will narrow down search results based on table name.</param>
            <param name="columnNamePattern">The column name pattern. If not <c>null</c>, will narrow down search results based on table column name.</param>
            <returns>An <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> which can be executed to search the table column information from the database.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetColumnMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractColumnMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
        </member>
        <member name="M:CBAM.SQL.CBAMExtensions.PreparePrimaryKeySearch(CBAM.SQL.SQLConnection,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> which can be used to execute table primary key search with given search parameters.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="schemaNamePattern">The schema name pattern. If not <c>null</c>, will narrow down search results based on schema name.</param>
            <param name="tableNamePattern">The table name pattern. If not <c>null</c>, will narrow down search results based on table name.</param>
            <returns>An <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> which can be executed to search the table primary key information from the database.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetPrimaryKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractPrimaryKeyMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
        </member>
        <member name="M:CBAM.SQL.CBAMExtensions.PrepareForeignKeySearch(CBAM.SQL.SQLConnection,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> which can be used to execute table foreign key search with given search parameters.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="primarySchemaName">The schema name of the table containing primary key. If not <c>null</c>, will narrow down search results based on primary key table schema name.</param>
            <param name="primaryTableName">The name of the table containing primary key. If not <c>null</c>, will narrow down search results based on primary key table name.</param>
            <param name="foreignSchemaName">The schema name of the table containing foreign key. If not <c>null</c>, will narrow down search results based on foreign key table schema name.</param>
            <param name="foreignTableName">The name of the table containing foreign key. If not <c>null</c>, will narrow down search results based on foreign key table name.</param>
            <returns>An <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> which can be executed to search the table foreign key information from the database.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetImportedForeignKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetExportedForeignKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetCrossReferenceMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractForeignKeyMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
        </member>
        <member name="M:CBAM.SQL.CBAMExtensions.GetExportedForeignKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)">
            <summary>
            This is shortcut method to enumerate all foreign key columns of given table, and return the column information in a list.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="schemaName">The schema name of the table to get foreign keys from.</param>
            <param name="tableName">The table name of the table to get foreign keys from.</param>
            <returns>Asynchronously returns list of <see cref="T:CBAM.SQL.ForeignKeyMetadata"/> objects that have information about foreign key columns of the given table.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetCrossReferenceMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.CreateForeignKeySearch(System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractForeignKeyMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
            <remarks>
            Since this method stores all results in a single <see cref="T:System.Collections.Generic.List`1"/>, use this when it is not expected to return a very large sets of data.
            </remarks>
        </member>
        <member name="M:CBAM.SQL.CBAMExtensions.GetImportedForeignKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)">
            <summary>
            This is shortcut method to enumerate all foreign key columns of other tables that reference primary key of given table, and return the column information in a list.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="schemaName">The schema name of the table that other foreign keys reference.</param>
            <param name="tableName">The table name of the table that other foreign keys reference.</param>
            <returns>Asynchronously returns list of <see cref="T:CBAM.SQL.ForeignKeyMetadata"/> objects that have information about foreign key columns of other tables that reference given table.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <seealso cref="M:CBAM.SQL.CBAMExtensions.GetCrossReferenceMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.CreateForeignKeySearch(System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractForeignKeyMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
            <remarks>
            Since this method stores all results in a single <see cref="T:System.Collections.Generic.List`1"/>, use this when it is not expected to return a very large sets of data.
            </remarks>
        </member>
        <member name="M:CBAM.SQL.CBAMExtensions.GetSchemaMetadataAsync(CBAM.SQL.SQLConnection,System.String)">
            <summary>
            This is shortcut method to enumerate all schemas, with given optional schema name filter, in the database, and return the schema information in a list.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="schemaNamePattern">The schema name pattern. If not <c>null</c>, will narrow down search results based on schema name.</param>
            <returns>Asynchronously returns list of <see cref="T:CBAM.SQL.SchemaMetadata"/> objects that have information about schema in the database.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.CreateSchemaSearch(System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractSchemaMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
            <remarks>
            Since this method stores all results in a single <see cref="T:System.Collections.Generic.List`1"/>, use this when it is not expected to return a very large sets of data.
            </remarks>
        </member>
        <member name="M:CBAM.SQL.CBAMExtensions.GetTableMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,CBAM.SQL.TableType[])">
            <summary>
            This is shortcut method to enumerate all tables, with given optional schema name, table name, and table type filters, in the database, and return the table information in a list.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="schemaNamePattern">The schema name pattern. If not <c>null</c>, will narrow down search results based on schema name.</param>
            <param name="tableNamePattern">The table name pattern. If not <c>null</c>, will narrow down search results based on table name.</param>
            <param name="tableTypes">The table types. If not <c>null</c> and not empty, can be used to further narrow down search results based on table type.</param>
            <returns>Asynchronously returns list of <see cref="T:CBAM.SQL.TableMetadata"/> objects that have information about table in the database.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.CreateTableSearch(System.String,System.String,CBAM.SQL.TableType[])"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractTableMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
            <remarks>
            Since this method stores all results in a single <see cref="T:System.Collections.Generic.List`1"/>, use this when it is not expected to return a very large sets of data.
            </remarks>
        </member>
        <member name="M:CBAM.SQL.CBAMExtensions.GetColumnMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,System.String)">
            <summary>
            This is shortcut method to enumerate all columns, with given optional schema, table, and column name filters, in the database, and return the column information in a list.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="schemaNamePattern">The schema name pattern. If not <c>null</c>, will narrow down search results based on schema name.</param>
            <param name="tableNamePattern">The table name pattern. If not <c>null</c>, will narrow down search results based on table name.</param>
            <param name="columnNamePattern">The column name pattern. If not <c>null</c>, will narrow down search results based on column name.</param>
            <returns>Asynchronously returns list of <see cref="T:CBAM.SQL.ColumnMetadata"/> objects that have information about column in the database.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.CreateColumnSearch(System.String,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractColumnMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
            <remarks>
            Since this method stores all results in a single <see cref="T:System.Collections.Generic.List`1"/>, use this when it is not expected to return a very large sets of data.
            </remarks>
        </member>
        <member name="M:CBAM.SQL.CBAMExtensions.GetPrimaryKeyMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String)">
            <summary>
            This is shortcut method to enumerate all primary key columns, with given optional schema and table name filters, in the database, and return the primary key column information in a list.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="schemaNamePattern">The schema name pattern. If not <c>null</c>, will narrow down search results based on schema name.</param>
            <param name="tableNamePattern">The table name pattern. If not <c>null</c>, will narrow down search results based on table name.</param>
            <returns>Asynchronously returns list of <see cref="T:CBAM.SQL.PrimaryKeyMetadata"/> objects that have information about primary key column in the database.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.CreatePrimaryKeySearch(System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractPrimaryKeyMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
            <remarks>
            Since this method stores all results in a single <see cref="T:System.Collections.Generic.List`1"/>, use this when it is not expected to return a very large sets of data.
            </remarks>
        </member>
        <member name="M:CBAM.SQL.CBAMExtensions.GetCrossReferenceMetadataAsync(CBAM.SQL.SQLConnection,System.String,System.String,System.String,System.String)">
            <summary>
            This is shortcut method to enumerate all foreign key columns, with given primary and foreign table schema name and table name filters, in the database, and return the foreign key column information in a list.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="primarySchemaName">The primary table schema name. If not <c>null</c>, will narrow down search results based on primary table's schema name.</param>
            <param name="primaryTableName">The primary table table name. If not <c>null</c>, will narrow down search results based on primary table's table name.</param>
            <param name="foreignSchemaName">The foreign table schema name. If not <c>null</c>, will narrow down search results based on foreign table's schema name.</param>
            <param name="foreignTableName">The foreign table table name. If not <c>null</c>, will narrow down search results based on foreign table's table name.</param>
            <returns>Asynchronously returns list of <see cref="T:CBAM.SQL.ForeignKeyMetadata"/> objects that have information about foreign key column in the database.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.CreateForeignKeySearch(System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:CBAM.SQL.DatabaseMetadata.ExtractForeignKeyMetadataAsync(UtilPack.TabularData.AsyncDataRow)"/>
            <remarks>
            Since this method stores all results in a single <see cref="T:System.Collections.Generic.List`1"/>, use this when it is not expected to return a very large sets of data.
            </remarks>
        </member>
        <member name="T:CBAM.SQL.SQLException">
            <summary>
            This class is common base class for all exceptions which signal some sort of SQL error in syntax or backend processing.
            </summary>
        </member>
        <member name="M:CBAM.SQL.SQLException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:CBAM.SQL.SQLException"/> with given message and optional inner exception.
            </summary>
            <param name="msg">The error message.</param>
            <param name="cause">The optional inner exception.</param>
        </member>
        <member name="T:CBAM.SQL.SQLStatementBuilderInformation">
            <summary>
            This interface provides read-only API for <see cref="T:CBAM.SQL.SQLStatementBuilder"/>.
            </summary>
            <seealso cref="T:CBAM.SQL.SQLStatementBuilder"/>
            <seealso cref="P:CBAM.SQL.SQLStatementBuilder.StatementBuilderInformation"/>
        </member>
        <member name="P:CBAM.SQL.SQLStatementBuilderInformation.SQLParameterCount">
            <summary>
            Gets the amount of SQL parameters (question marks) in this SQL statement.
            </summary>
            <value>The amount of SQL parameters (question marks) in this SQL statement.</value>
        </member>
        <member name="P:CBAM.SQL.SQLStatementBuilderInformation.BatchParameterCount">
            <summary>
            Gets the current count of batch parameters.
            </summary>
            <value>The current count of batch parameters.</value>
        </member>
        <member name="M:CBAM.SQL.SQLStatementBuilderInformation.GetParameterInfo(System.Int32)">
            <summary>
            Gets information about parameter at given index.
            Maximum amount of parametrs can be queried via <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.SQLParameterCount"/> property.
            </summary>
            <param name="parameterIndex">The index of the parameter. Should be <c>0 ≤ <paramref name="parameterIndex"/> &lt; <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.SQLParameterCount"/></c>.</param>
            <returns>The parameter information at given index.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="parameterIndex"/> is out of bounds.</exception>
            <seealso cref="T:CBAM.SQL.StatementParameter"/>
        </member>
        <member name="M:CBAM.SQL.SQLStatementBuilderInformation.GetBatchParameterInfo(System.Int32,System.Int32)">
            <summary>
            Gets information about parameter which has been previously added to batch of parameters.
            </summary>
            <param name="batchIndex">The batch index. Should be <c>0 ≤ <paramref name="batchIndex"/> &lt; <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.BatchParameterCount"/></c>.</param>
            <param name="parameterIndex">The parameter index. Should be <c>0 ≤ <paramref name="parameterIndex"/> &lt; <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.SQLParameterCount"/></c>.</param>
            <returns>The parameter information at given batch and parameter indices.</returns>
            <exception cref="T:System.ArgumentException">If either of <paramref name="batchIndex"/> or <paramref name="parameterIndex"/> is out of bounds.</exception>
            <seealso cref="T:CBAM.SQL.StatementParameter"/>
        </member>
        <member name="P:CBAM.SQL.SQLStatementBuilderInformation.SQL">
            <summary>
            Gets the textual SQL statement of this <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/>.
            </summary>
            <value>The textual SQL statement of this <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/>.</value>
        </member>
        <member name="T:CBAM.SQL.SQLStatementBuilder">
            <summary>
            This interface extends read-only <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/> with modifiable API.
            Not that just like in JDBC, the parameters for prepared statement should be question marks in statement SQL given to <see cref="M:CBAM.Abstractions.ConnectionVendorFunctionality`2.CreateStatementBuilder(`1)"/> method.
            </summary>
        </member>
        <member name="M:CBAM.SQL.SQLStatementBuilder.SetParameterObjectWithType(System.Int32,System.Object,System.Type)">
            <summary>
            Sets the parameter at given index to given value
            </summary>
            <param name="parameterIndex">The index of the parameter. Should be <c>0 ≤ <paramref name="parameterIndex"/> &lt; <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.SQLParameterCount"/></c>.</param>
            <param name="value">The value to set. May be <c>null</c>.</param>
            <param name="clrType">The type of the value. If value is not <c>null</c> and this parameter is <c>null</c>, then the result of <see cref="M:System.Object.GetType"/> obtained from <paramref name="value"/> will be used.</param>
            <exception cref="T:System.ArgumentNullException">If both <paramref name="value"/> and <paramref name="clrType"/> are <c>null</c></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="parameterIndex"/> is out of bounds.</exception>
            <seealso cref="M:E_CBAM.SetNull(CBAM.SQL.SQLStatementBuilder,System.Int32,System.Type)"/>
            <seealso cref="M:E_CBAM.SetParameterBoolean(CBAM.SQL.SQLStatementBuilder,System.Int32,System.Nullable{System.Boolean})"/>
            <seealso cref="M:E_CBAM.SetParameterInt16(CBAM.SQL.SQLStatementBuilder,System.Int32,System.Nullable{System.Int16})"/>
            <seealso cref="M:E_CBAM.SetParameterInt32(CBAM.SQL.SQLStatementBuilder,System.Int32,System.Nullable{System.Int32})"/>
            <seealso cref="M:E_CBAM.SetParameterInt64(CBAM.SQL.SQLStatementBuilder,System.Int32,System.Nullable{System.Int64})"/>
            <seealso cref="M:E_CBAM.SetParameterString(CBAM.SQL.SQLStatementBuilder,System.Int32,System.String)"/>
            <seealso cref="M:E_CBAM.SetParameterDateTime(CBAM.SQL.SQLStatementBuilder,System.Int32,System.Nullable{System.DateTime})"/>
            <seealso cref="M:E_CBAM.SetParameterArray``1(CBAM.SQL.SQLStatementBuilder,System.Int32,System.Array)"/>
        </member>
        <member name="M:CBAM.SQL.SQLStatementBuilder.AddBatch">
            <summary>
            Given that this builder contains a set of parameters added via <see cref="M:CBAM.SQL.SQLStatementBuilder.SetParameterObjectWithType(System.Int32,System.Object,System.Type)"/>, adds that set to a list of batched parameters.
            Then clears the current set of parameters.
            </summary>
            <exception cref="T:System.InvalidOperationException">If there is at least one parameter that has not been set.</exception>
        </member>
        <member name="M:CBAM.SQL.SQLStatementBuilder.RemoveAllBatchedParameters">
            <summary>
            Removes all parameters previously added to batch via <see cref="M:CBAM.SQL.SQLStatementBuilder.AddBatch"/> call.
            </summary>
        </member>
        <member name="P:CBAM.SQL.SQLStatementBuilder.StatementBuilderInformation">
            <summary>
            Gets the read-only <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/> object which has same state as this <see cref="T:CBAM.SQL.SQLStatementBuilder"/>.
            </summary>
            <value>The read-only <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/> object which has same state as this <see cref="T:CBAM.SQL.SQLStatementBuilder"/>.</value>
            <remarks>
            The returned object must not be castable back to this <see cref="T:CBAM.SQL.SQLStatementBuilder"/>.
            </remarks>
        </member>
        <member name="T:CBAM.SQL.StatementParameter">
            <summary>
            This interface contains information about a single parameter in <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/>.
            </summary>
        </member>
        <member name="P:CBAM.SQL.StatementParameter.ParameterCILType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the parameter value.
            </summary>
            <value>The <see cref="T:System.Type"/> of the parameter value.</value>
        </member>
        <member name="P:CBAM.SQL.StatementParameter.ParameterValue">
            <summary>
            Gets the parameter value.
            May be <c>null</c>.
            </summary>
            <value>The parameter value.</value>
        </member>
        <member name="T:E_CBAM">
            <summary>
            This class contains extension methods for types defined in this assembly.
            </summary>
        </member>
        <member name="M:E_CBAM.IncludeDataRowsOnly(System.Collections.Generic.IAsyncEnumerable{CBAM.SQL.SQLStatementExecutionResult})">
            <summary>
            This method is a shortcut of calling <see cref="M:E_UtilPack.OfType{T, U}(IAsyncEnumerable{T}, OfTypeInfo{U})"/> making this <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> of <see cref="T:CBAM.SQL.SQLStatementExecutionResult"/> only return <see cref="T:CBAM.SQL.SQLDataRow"/>s.
            </summary>
            <param name="enumerable">This SQL <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.</param>
            <returns>Asynchronous enumerable which only returns <see cref="T:CBAM.SQL.SQLDataRow"/>s and filters out all other items.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> is <c>null</c>.</exception>
        </member>
        <member name="M:E_CBAM.GetFirstOrDefaultAsync``1(CBAM.SQL.SQLConnection,CBAM.SQL.SQLStatementBuilder,System.Func{UtilPack.TabularData.AsyncDataRow,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Shortcut method to get some value from first seen <see cref="T:CBAM.SQL.SQLDataRow"/> of <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> returned by <see cref="M:CBAM.Abstractions.Connection`6.PrepareStatementForExecution(`1)"/> for given <see cref="T:CBAM.SQL.SQLStatementBuilder"/>.
            </summary>
            <typeparam name="T">The type of the value to return.</typeparam>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="statement">The <see cref="T:CBAM.SQL.SQLStatementBuilder"/> to execute.</param>
            <param name="extractor">The asynchronous callback to get value from <see cref="T:CBAM.SQL.SQLDataRow"/>.</param>
            <returns>A task which will return value of <paramref name="extractor"/> if at least one <see cref="T:CBAM.SQL.SQLDataRow"/> is encountered during execution of <paramref name="statement"/>.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="statement"/> or <paramref name="extractor"/> is <c>null</c>.</exception>
        </member>
        <member name="M:E_CBAM.GetFirstOrDefaultAsync``1(CBAM.SQL.SQLConnection,System.String,System.Func{UtilPack.TabularData.AsyncDataRow,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Shortcut method to get some value from first seen <see cref="T:CBAM.SQL.SQLDataRow"/> of <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> returned by <see cref="M:CBAM.Abstractions.Connection`6.PrepareStatementForExecution(`1)"/> for <see cref="T:CBAM.SQL.SQLStatementBuilder"/> created with given SQL string.
            </summary>
            <typeparam name="T">The type of the value to return.</typeparam>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="sql">The SQL string.</param>
            <param name="extractor">The asynchronous callback to get value from <see cref="T:CBAM.SQL.SQLDataRow"/>.</param>
            <returns>A task which will return value of <paramref name="extractor"/> if at least one <see cref="T:CBAM.SQL.SQLDataRow"/> is encountered during execution of <paramref name="sql"/>.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sql"/> or <paramref name="extractor"/> is <c>null</c>.</exception>
        </member>
        <member name="M:E_CBAM.GetFirstOrDefaultAsync``1(CBAM.SQL.SQLConnection,CBAM.SQL.SQLStatementBuilder,System.Int32,System.Func{UtilPack.TabularData.AsyncDataColumn,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Shortcut method to get some value from first seen <see cref="T:CBAM.SQL.SQLDataRow"/> of <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> returned by <see cref="M:CBAM.Abstractions.Connection`6.PrepareStatementForExecution(`1)"/> for given <see cref="T:CBAM.SQL.SQLStatementBuilder"/>.
            This method lets optionally specify a callback to extract value from single <see cref="T:UtilPack.TabularData.AsyncDataColumn"/>, and also optionally specify a column index which will be used to get the <see cref="T:UtilPack.TabularData.AsyncDataColumn"/> to extract value from.
            </summary>
            <typeparam name="T">The type of the value to return.</typeparam>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="statement">The <see cref="T:CBAM.SQL.SQLStatementBuilder"/> to execute.</param>
            <param name="parameterIndex">The index of the <see cref="T:UtilPack.TabularData.AsyncDataColumn"/> to pass to <paramref name="extractor"/> callback, is <c>0</c> by default.</param>
            <param name="extractor">The optional asynchronous callback to use to extract the value from <see cref="T:UtilPack.TabularData.AsyncDataColumn"/>.</param>
            <returns>A task which will return value of <paramref name="extractor"/> if at least one <see cref="T:CBAM.SQL.SQLDataRow"/> is encountered during execution of <paramref name="statement"/>.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="statement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:E_CBAM.GetFirstOrDefaultAsync``1(CBAM.SQL.SQLConnection,System.String,System.Int32,System.Func{UtilPack.TabularData.AsyncDataColumn,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Shortcut method to get some value from first seen <see cref="T:CBAM.SQL.SQLDataRow"/> of <see cref="T:UtilPack.AsyncEnumeration.AsyncEnumerator`1"/> returned by <see cref="M:CBAM.Abstractions.Connection`6.PrepareStatementForExecution(`1)"/> for <see cref="T:CBAM.SQL.SQLStatementBuilder"/> created with given SQL string.
            This method lets optionally specify a callback to extract value from single <see cref="T:UtilPack.TabularData.AsyncDataColumn"/>, and also optionally specify a column index which will be used to get the <see cref="T:UtilPack.TabularData.AsyncDataColumn"/> to extract value from.
            </summary>
            <typeparam name="T">The type of the value to return.</typeparam>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="sql">The <see cref="T:CBAM.SQL.SQLStatementBuilder"/> to execute.</param>
            <param name="parameterIndex">The index of the <see cref="T:UtilPack.TabularData.AsyncDataColumn"/> to pass to <paramref name="extractor"/> callback, is <c>0</c> by default.</param>
            <param name="extractor">The optional asynchronous callback to use to extract the value from <see cref="T:UtilPack.TabularData.AsyncDataColumn"/>.</param>
            <returns>A task which will return value of <paramref name="extractor"/> if at least one <see cref="T:CBAM.SQL.SQLDataRow"/> is encountered during execution of <paramref name="sql"/>.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sql"/> is <c>null</c>.</exception>
        </member>
        <member name="M:E_CBAM.DoWriteStatements(CBAM.SQL.SQLConnection,System.Func{CBAM.SQL.SQLConnection,System.Threading.Tasks.Task})">
            <summary>
            This is helper method to perform some action on <see cref="T:CBAM.SQL.SQLConnection"/> and make sure that the connection is not in readonly mode.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="action">The asynchronous callback to use <see cref="T:CBAM.SQL.SQLConnection"/></param>
            <returns>A task which on completion has executed given <paramref name="action"/> callback.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:E_CBAM.DoWriteStatements``1(CBAM.SQL.SQLConnection,System.Func{CBAM.SQL.SQLConnection,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            This is helper method to perform some asynchronous action on <see cref="T:CBAM.SQL.SQLConnection"/> and make sure that the connection is not in readonly mode.
            Then, some value whhich is obtained by the asynchronous action, is returned.
            </summary>
            <typeparam name="T">The type of return value of callback</typeparam>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="func">The asynchronous callback to use <see cref="T:CBAM.SQL.SQLConnection"/> and return value of type <typeparamref name="T"/>.</param>
            <returns>A task which on completion has executed given <paramref name="func"/> callback.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="func"/> is <c>null</c>.</exception>
        </member>
        <member name="M:E_CBAM.DoReadStatements(CBAM.SQL.SQLConnection,System.Func{CBAM.SQL.SQLConnection,System.Threading.Tasks.Task})">
            <summary>
            This is helper method to perform some action on <see cref="T:CBAM.SQL.SQLConnection"/> and make sure that the connection is in readonly mode.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="action">The asynchronous callback to use <see cref="T:CBAM.SQL.SQLConnection"/></param>
            <returns>A task which on completion has executed given <paramref name="action"/> callback.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:E_CBAM.DoReadStatements``1(CBAM.SQL.SQLConnection,System.Func{CBAM.SQL.SQLConnection,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            This is helper method to perform some asynchronous action on <see cref="T:CBAM.SQL.SQLConnection"/> and make sure that the connection is in readonly mode.
            Then, some value whhich is obtained by the asynchronous action, is returned.
            </summary>
            <typeparam name="T">The type of return value of callback</typeparam>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="func">The asynchronous callback to use <see cref="T:CBAM.SQL.SQLConnection"/> and return value of type <typeparamref name="T"/>.</param>
            <returns>A task which on completion has executed given <paramref name="func"/> callback.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="func"/> is <c>null</c>.</exception>
        </member>
        <member name="M:E_CBAM.DoStatements(CBAM.SQL.SQLConnection,System.Func{CBAM.SQL.SQLConnection,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            This is generic method to execute some asynchronous callback for this <see cref="T:CBAM.SQL.SQLConnection"/> and make sure that the connection readonly mode is the one specified as parameter.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="action">The asynchronous callback to use <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="readOnly">Whether to set <see cref="T:CBAM.SQL.SQLConnection"/> in readonly mode before calling <paramref name="action"/> callback.</param>
            <returns>A task which on completion has executed given <paramref name="action"/> callback.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:E_CBAM.DoStatements``1(CBAM.SQL.SQLConnection,System.Func{CBAM.SQL.SQLConnection,System.Threading.Tasks.ValueTask{``0}},System.Boolean)">
            <summary>
            This is generic method to execute some asynchronous callback for this <see cref="T:CBAM.SQL.SQLConnection"/> and make sure that the connection readonly mode is the one specified as parameter.
            </summary>
            <typeparam name="T">The return type of the task of the asynchronous callback.</typeparam>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="func">The asynchronous callback to use <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="readOnly">Whether to set <see cref="T:CBAM.SQL.SQLConnection"/> in readonly mode before calling <paramref name="func"/> callback.</param>
            <returns>A task which on completion has executed given <paramref name="func"/> callback, and returns the result of <paramref name="func"/>.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="func"/> is <c>null</c>.</exception>
        </member>
        <member name="M:E_CBAM.ExecuteStatementsFromStreamAsync(CBAM.SQL.SQLConnection,System.IO.Stream,System.Text.Encoding,System.Int32,System.Int32,System.Func{CBAM.SQL.SQLException,CBAM.SQL.WhenExceptionInMultipleStatements},System.Threading.CancellationToken)">
            <summary>
            This method can be used to read SQL statements from stream (e.g. a file) and passively process each statement with this <see cref="T:CBAM.SQL.SQLConnection"/> until the last statement is done processing.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the SQL statements.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use when reading textual SQL statemetns from <paramref name="stream"/>. If <c>null</c>, a new instance of <see cref="T:System.Text.UTF8Encoding"/> which does not emit nor throw will be used.</param>
            <param name="streamMaxBufferCount">The amount of characters to read for one statement until the buffer is cleared. This does not mean the maximum size for statement, instead it indicates that if after processing a single SQL statement, if the buffer is higher than this number, then it will be cleared.</param>
            <param name="streamReadChunkCount">The amount bytes to read in one chunk from given <paramref name="stream"/>.</param>
            <param name="onException">Optional callback to react when <see cref="T:CBAM.SQL.SQLException"/> occurs during passive processing of single SQL statement. It should return <see cref="T:CBAM.SQL.WhenExceptionInMultipleStatements"/>, or be left out, in which case <see cref="F:CBAM.SQL.WhenExceptionInMultipleStatements.Rethrow"/> behaviour pattern will be used.</param>
            <param name="token">Optional <see cref="T:System.Threading.CancellationToken"/> to use when creating <see cref="T:UtilPack.StreamReaderWithResizableBuffer"/>.</param>
            <returns>A task which will on completion return amount of statements read.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <c>null</c>.</exception>
            <seealso cref="M:E_CBAM.ExecuteStatementsFromStreamAsync(CBAM.SQL.SQLConnection,UtilPack.MemorizingPotentiallyAsyncReader{System.Nullable{System.Char},System.Char},System.Func{CBAM.SQL.SQLException,CBAM.SQL.WhenExceptionInMultipleStatements})"/>
            <seealso cref="T:CBAM.SQL.WhenExceptionInMultipleStatements"/>
        </member>
        <member name="M:E_CBAM.ExecuteStatementsFromStreamAsync(CBAM.SQL.SQLConnection,UtilPack.MemorizingPotentiallyAsyncReader{System.Nullable{System.Char},System.Char},System.Func{CBAM.SQL.SQLException,CBAM.SQL.WhenExceptionInMultipleStatements})">
            <summary>
            This method can be used to read SQL statements from <see cref="T:UtilPack.MemorizingPotentiallyAsyncReader`2"/> reader, and passively process each statement with this <see cref="T:CBAM.SQL.SQLConnection"/> until the last statement is done processing.
            </summary>
            <param name="connection">This <see cref="T:CBAM.SQL.SQLConnection"/>.</param>
            <param name="reader">The <see cref="T:UtilPack.MemorizingPotentiallyAsyncReader`2"/> reader to use to read characters from.</param>
            <param name="onException">Optional callback to react when <see cref="T:CBAM.SQL.SQLException"/> occurs during passive processing of single SQL statement. It should return <see cref="T:CBAM.SQL.WhenExceptionInMultipleStatements"/>, or be left out, in which case <see cref="F:CBAM.SQL.WhenExceptionInMultipleStatements.Rethrow"/> behaviour pattern will be used.</param>
            <returns>A task which will on completion return amount of statements read.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLConnection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="reader"/> is <c>null</c>.</exception>
            <seealso cref="M:E_CBAM.ExecuteStatementsFromStreamAsync(CBAM.SQL.SQLConnection,System.IO.Stream,System.Text.Encoding,System.Int32,System.Int32,System.Func{CBAM.SQL.SQLException,CBAM.SQL.WhenExceptionInMultipleStatements},System.Threading.CancellationToken)"/>
            <seealso cref="T:CBAM.SQL.WhenExceptionInMultipleStatements"/>
            <seealso cref="T:UtilPack.MemorizingPotentiallyAsyncReader`2"/>
        </member>
        <member name="M:E_CBAM.SetParameterBoolean(CBAM.SQL.SQLStatementBuilder,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            This is shortcut method to set parameter as a <see cref="T:System.Boolean"/> value at given index.
            </summary>
            <param name="stmt">This <see cref="T:CBAM.SQL.SQLStatementBuilder"/>.</param>
            <param name="parameterIndex">The index of the parameter. Should be <c>0 ≤ <paramref name="parameterIndex"/> &lt; <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.SQLParameterCount"/></c>.</param>
            <param name="value">The nullable <see cref="T:System.Boolean"/> value to set.</param>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLStatementBuilder"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="parameterIndex"/> is out of bounds.</exception>
        </member>
        <member name="M:E_CBAM.SetParameterInt32(CBAM.SQL.SQLStatementBuilder,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This is shortcut method to set parameter as a <see cref="T:System.Int32"/> value at given index.
            </summary>
            <param name="stmt">This <see cref="T:CBAM.SQL.SQLStatementBuilder"/>.</param>
            <param name="parameterIndex">The index of the parameter. Should be <c>0 ≤ <paramref name="parameterIndex"/> &lt; <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.SQLParameterCount"/></c>.</param>
            <param name="value">The nullable <see cref="T:System.Int32"/> value to set.</param>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLStatementBuilder"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="parameterIndex"/> is out of bounds.</exception>
        </member>
        <member name="M:E_CBAM.SetParameterInt16(CBAM.SQL.SQLStatementBuilder,System.Int32,System.Nullable{System.Int16})">
            <summary>
            This is shortcut method to set parameter as a <see cref="T:System.Int16"/> value at given index.
            </summary>
            <param name="stmt">This <see cref="T:CBAM.SQL.SQLStatementBuilder"/>.</param>
            <param name="parameterIndex">The index of the parameter. Should be <c>0 ≤ <paramref name="parameterIndex"/> &lt; <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.SQLParameterCount"/></c>.</param>
            <param name="value">The nullable <see cref="T:System.Int16"/> value to set.</param>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLStatementBuilder"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="parameterIndex"/> is out of bounds.</exception>
        </member>
        <member name="M:E_CBAM.SetParameterInt64(CBAM.SQL.SQLStatementBuilder,System.Int32,System.Nullable{System.Int64})">
            <summary>
            This is shortcut method to set parameter as a <see cref="T:System.Int64"/> value at given index.
            </summary>
            <param name="stmt">This <see cref="T:CBAM.SQL.SQLStatementBuilder"/>.</param>
            <param name="parameterIndex">The index of the parameter. Should be <c>0 ≤ <paramref name="parameterIndex"/> &lt; <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.SQLParameterCount"/></c>.</param>
            <param name="value">The nullable <see cref="T:System.Int64"/> value to set.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="parameterIndex"/> is out of bounds.</exception>
        </member>
        <member name="M:E_CBAM.SetParameterDateTime(CBAM.SQL.SQLStatementBuilder,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            This is shortcut method to set parameter as a <see cref="T:System.DateTime"/> value at given index.
            </summary>
            <param name="stmt">This <see cref="T:CBAM.SQL.SQLStatementBuilder"/>.</param>
            <param name="parameterIndex">The index of the parameter. Should be <c>0 ≤ <paramref name="parameterIndex"/> &lt; <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.SQLParameterCount"/></c>.</param>
            <param name="value">The nullable <see cref="T:System.DateTime"/> value to set.</param>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLStatementBuilder"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="parameterIndex"/> is out of bounds.</exception>
        </member>
        <member name="M:E_CBAM.SetParameterString(CBAM.SQL.SQLStatementBuilder,System.Int32,System.String)">
            <summary>
            This is shortcut method to set parameter as a <see cref="T:System.String"/> value at given index.
            </summary>
            <param name="stmt">This <see cref="T:CBAM.SQL.SQLStatementBuilder"/>.</param>
            <param name="parameterIndex">The index of the parameter. Should be <c>0 ≤ <paramref name="parameterIndex"/> &lt; <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.SQLParameterCount"/></c>.</param>
            <param name="value">The nullable <see cref="T:System.String"/> value to set.</param>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLStatementBuilder"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="parameterIndex"/> is out of bounds.</exception>
        </member>
        <member name="M:E_CBAM.SetParameterArray``1(CBAM.SQL.SQLStatementBuilder,System.Int32,System.Array)">
            <summary>
            This is shortcut method to set parameter as an array value at given index.
            </summary>
            <param name="stmt">This <see cref="T:CBAM.SQL.SQLStatementBuilder"/>.</param>
            <param name="parameterIndex">The index of the parameter. Should be <c>0 ≤ <paramref name="parameterIndex"/> &lt; <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.SQLParameterCount"/></c>.</param>
            <param name="value">The array to set.</param>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLStatementBuilder"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="parameterIndex"/> is out of bounds.</exception>
        </member>
        <member name="M:E_CBAM.SetParameterObject``1(CBAM.SQL.SQLStatementBuilder,System.Int32,System.Object)">
            <summary>
            This is shortcut method to set parameter as value of specified type, when the type is known at compile time.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="stmt">This <see cref="T:CBAM.SQL.SQLStatementBuilder"/>.</param>
            <param name="parameterIndex">The index of the parameter. Should be <c>0 ≤ <paramref name="parameterIndex"/> &lt; <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.SQLParameterCount"/></c>.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLStatementBuilder"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="parameterIndex"/> is out of bounds.</exception>
        </member>
        <member name="M:E_CBAM.SetNull(CBAM.SQL.SQLStatementBuilder,System.Int32,System.Type)">
            <summary>
            Sets the parameter at given index to <c>null</c>.
            </summary>
            <param name="stmt">This <see cref="T:CBAM.SQL.SQLStatementBuilder"/>.</param>
            <param name="parameterIndex">The index of the parameter. Should be <c>0 ≤ <paramref name="parameterIndex"/> &lt; <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.SQLParameterCount"/></c>.</param>
            <param name="clrType">The expected type of the SQL value.</param>
        </member>
        <member name="M:E_CBAM.IsSimple(CBAM.SQL.SQLStatementBuilderInformation)">
            <summary>
            Helper method to detect whether this <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/> is simple - that is, it contains no parameters and has no batched parameters either.
            </summary>
            <param name="stmt">This <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/>.</param>
            <returns><c>true</c> if this <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/> has no batched parameter sets, and also has no SQL parameters; <c>false</c> otherwise.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/> is <c>null</c>.</exception>
        </member>
        <member name="M:E_CBAM.HasBatchParameters(CBAM.SQL.SQLStatementBuilderInformation)">
            <summary>
            Helper method to detect whether this <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/> has any batch parameters - that is, its <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.BatchParameterCount"/> is greater than <c>0</c>.
            </summary>
            <param name="stmt">This <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/>.</param>
            <returns><c>true</c> if this <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/> has batch parameters; <c>false</c> otherwise.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/> is <c>null</c>.</exception>
        </member>
        <member name="M:E_CBAM.GetParametersEnumerable(CBAM.SQL.SQLStatementBuilderInformation)">
            <summary>
            Helper method to get enumerable of <see cref="T:CBAM.SQL.StatementParameter"/>s of this <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/>.
            </summary>
            <param name="stmt">This <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/>.</param>
            <returns>An enumerable of <see cref="T:CBAM.SQL.StatementParameter"/>s of this <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/>.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/> is <c>null</c>.</exception>
        </member>
        <member name="M:E_CBAM.GetParametersEnumerable(CBAM.SQL.SQLStatementBuilderInformation,System.Int32)">
            <summary>
            Helper method to get enumerable of batched <see cref="T:CBAM.SQL.StatementParameter"/>s at given batch index.
            </summary>
            <param name="stmt">This <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/>.</param>
            <param name="batchIndex">The batch index of the parameter set to enumerate. Should be <c>0 ≤ <paramref name="batchIndex"/> &lt; <see cref="P:CBAM.SQL.SQLStatementBuilderInformation.BatchParameterCount"/></c>.</param>
            <returns>An enumerable of batched <see cref="T:CBAM.SQL.StatementParameter"/>s at given batch index.</returns>
            <exception cref="T:System.NullReferenceException">If this <see cref="T:CBAM.SQL.SQLStatementBuilderInformation"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="batchIndex"/> is out of bounds.</exception>
        </member>
    </members>
</doc>
